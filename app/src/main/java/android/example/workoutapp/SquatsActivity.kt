/*
 * Copyright 2019 The TensorFlow Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.example.workoutapp

import android.Manifest
import android.app.AlertDialog
import android.app.Dialog
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.*
import android.hardware.camera2.*
import android.media.Image
import android.media.ImageReader
import android.media.ImageReader.OnImageAvailableListener
import android.media.MediaPlayer
import android.os.Bundle
import android.os.CountDownTimer
import android.os.Handler
import android.os.HandlerThread
import android.util.Log
import android.util.Size
import android.util.SparseIntArray
import android.view.Surface
import android.view.SurfaceHolder
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.fragment.app.DialogFragment
import kotlinx.android.synthetic.main.activity_posenet_workout.*
import org.apache.commons.math3.stat.descriptive.SummaryStatistics
import org.tensorflow.lite.examples.posenet.lib.BodyPart
import org.tensorflow.lite.examples.posenet.lib.Person
import org.tensorflow.lite.examples.posenet.lib.Posenet
import java.util.concurrent.Semaphore
import java.util.concurrent.TimeUnit
import kotlin.math.abs


//class MainActivity : AppCompatActivity() {
class SquatsActivity :  AppCompatActivity()
  //Fragment(),
  //ActivityCompat.OnRequestPermissionsResultCallback {
  {


  /** List of body joints that should be connected.    */
  private val bodyJoints = listOf(
    Pair(BodyPart.LEFT_WRIST, BodyPart.LEFT_ELBOW),
    Pair(BodyPart.LEFT_ELBOW, BodyPart.LEFT_SHOULDER),
    Pair(BodyPart.LEFT_SHOULDER, BodyPart.RIGHT_SHOULDER),
    Pair(BodyPart.RIGHT_SHOULDER, BodyPart.RIGHT_ELBOW),
    Pair(BodyPart.RIGHT_ELBOW, BodyPart.RIGHT_WRIST),
    Pair(BodyPart.LEFT_SHOULDER, BodyPart.LEFT_HIP),
    Pair(BodyPart.LEFT_HIP, BodyPart.RIGHT_HIP),
    Pair(BodyPart.RIGHT_HIP, BodyPart.RIGHT_SHOULDER),
    Pair(BodyPart.LEFT_HIP, BodyPart.LEFT_KNEE),
    Pair(BodyPart.LEFT_KNEE, BodyPart.LEFT_ANKLE),
    Pair(BodyPart.RIGHT_HIP, BodyPart.RIGHT_KNEE),
    Pair(BodyPart.RIGHT_KNEE, BodyPart.RIGHT_ANKLE)
  )

  /** Threshold for confidence score. */
  private val minConfidence = 0.5

  /** Radius of circle used to draw keypoints.  */
  private val circleRadius = 8.0f

  /** Paint class holds the style and color information to draw geometries,text and bitmaps. */
  private var paint = Paint()

  /** A shape for extracting frame data.   */
  private val PREVIEW_WIDTH = 640
  private val PREVIEW_HEIGHT = 480

  /** An object for the Posenet library.    */
  private lateinit var posenet: Posenet

  /** ID of the current [CameraDevice].   */
  private var cameraId: String = ""

  ///** A [SurfaceView] for camera preview.   */
  //private var surfaceView: SurfaceView? = null

  /** A [CameraCaptureSession] for camera preview.   */
  private var captureSession: CameraCaptureSession? = null

  /** A reference to the opened [CameraDevice].    */
  private var cameraDevice: CameraDevice? = null

  /** The [android.util.Size] of camera preview.  */
  private var previewSize: Size? = null

  /** The [android.util.Size.getWidth] of camera preview. */
  private var previewWidth = 0

  /** The [android.util.Size.getHeight] of camera preview.  */
  private var previewHeight = 0

  /** A counter to keep count of total frames.  */
  private var frameCounter = 0

  /** An IntArray to save image data in ARGB8888 format  */
  private lateinit var rgbBytes: IntArray

  /** A ByteArray to save image data in YUV format  */
  private var yuvBytes = arrayOfNulls<ByteArray>(3)

  /** An additional thread for running tasks that shouldn't block the UI.   */
  private var backgroundThread: HandlerThread? = null

  /** A [Handler] for running tasks in the background.    */
  private var backgroundHandler: Handler? = null

  /** An [ImageReader] that handles preview frame capture.   */
  private var imageReader: ImageReader? = null

  /** [CaptureRequest.Builder] for the camera preview   */
  private var previewRequestBuilder: CaptureRequest.Builder? = null

  /** [CaptureRequest] generated by [.previewRequestBuilder   */
  private var previewRequest: CaptureRequest? = null

  /** A [Semaphore] to prevent the app from exiting before closing the camera.    */
  private val cameraOpenCloseLock = Semaphore(1)

  /** Whether the current camera device supports Flash or not.    */
  private var flashSupported = false

  /** Orientation of the camera sensor.   */
  private var sensorOrientation: Int? = null

  /** Abstract interface to someone holding a display surface.    */
  private var surfaceHolder: SurfaceHolder? = null





  private var yLineValues:MutableList<Double> = MutableList(10) { 75.0 }
  private var lag:Int = 10
  private var threshold:Double = -75.0
  private var influence:Double = 0.2
  // the results (peaks, 1 or -1) of our algorithm
  private var signals = MutableList<Int>(yLineValues.size, { 0 })
  // filter out the signals (peaks) from our original list (using influence arg)
  private var filteredY = ArrayList<Double>(yLineValues)
  // the current average of the rolling window
  private var avgFilter = MutableList<Double>(yLineValues.size, { 0.0 })
  // the current standard deviation of the rolling window
  private var stdFilter = MutableList<Double>(yLineValues.size, { 0.0 })

  private val stats = SummaryStatistics()

  //the get return value of signal
  private var smoothed_yLineValues:MutableList<Int> = MutableList(0) {0}

  //number of squats
  private var squats = 0;


  val REQUEST_CAMERA_PERMISSION = 1

  /** Model input shape for images.   */
  val MODEL_WIDTH = 257
  val MODEL_HEIGHT = 257




    private var musicmediaPlayer: MediaPlayer? = null
    private var voicemediaPlayer: MediaPlayer? = null
    private var countdown0: Boolean = false
    private var countdowntimer:CountDownTimer? = null
    private var starttime:Long = 0L
    private var pausestarttime:Long = 0L
    private var pauseduration:Long = 0L

    private var musicfile: Int = -1

    override fun onCreate(savedInstanceState: Bundle?) {

    super.onCreate(savedInstanceState)

    setContentView(R.layout.activity_posenet_workout)


    //start music
      //get music config
      //get saved settings
      val settings = getSharedPreferences("UserInfo", 0)
      val set_music = settings.getString("music", "")
      when (set_music) {
        getString(R.string.music1) -> musicfile = R.raw.linkin_park_in_the_end
        getString(R.string.music2) -> musicfile = R.raw.linkin_park_numb
        getString(R.string.music3) -> musicfile = R.raw.linkin_park_what_ive_done
        getString(R.string.nomusic) -> musicfile = -1
        else -> {
          musicfile = -1
        }
      }

      if (musicfile != -1){
        musicmediaPlayer = MediaPlayer.create(this, musicfile)
        musicmediaPlayer?.setOnPreparedListener{
          //val log1 = (Math.log(maxVolume - currVolume) / Math.log(maxVolume.toDouble())).toFloat()
          //musicmediaPlayer.setVolume(log1, log1) //set volume takes two paramater

          musicmediaPlayer?.start()
        }
      }

    // init avgFilter and stdFilter

    yLineValues.take(10).forEach { s -> stats.addValue(s) }
    avgFilter[this.lag - 1] = stats.mean
    stdFilter[this.lag - 1] = Math.sqrt(stats.populationVariance) // getStandardDeviation() uses sample variance (not what we want)
    stats.clear()
    countdowntimer = object: CountDownTimer(6000, 1000) {
      override fun onTick(millisUntilFinished: Long) {
        textView7.setText("Start in \n" + millisUntilFinished / 1000)
      }

      override fun onFinish() {
        textView7.visibility=View.INVISIBLE;
        voicemediaPlayer = MediaPlayer.create(this@SquatsActivity, R.raw.go2)
        voicemediaPlayer?.setOnPreparedListener{
          voicemediaPlayer?.start()
          countdown0 = true
          starttime = (System.currentTimeMillis() / 1000).toInt().toLong()
        }
      }
    }



      (countdowntimer as CountDownTimer).start()
  }


  /** [CameraDevice.StateCallback] is called when [CameraDevice] changes its state.   */
  private val stateCallback = object : CameraDevice.StateCallback() {

    override fun onOpened(cameraDevice: CameraDevice) {
      surfaceHolder = surfaceView.holder

      cameraOpenCloseLock.release()
      this@SquatsActivity.cameraDevice = cameraDevice
      createCameraPreviewSession()

      backbutton.setOnClickListener {


        (countdowntimer as CountDownTimer).cancel()


        var endtime:Long = (System.currentTimeMillis() / 1000).toInt().toLong()
        var duration = endtime - starttime - pauseduration

        if (!countdown0){
          duration = 0
          squats = 0
        }

        // connecting this main activity with the second activity and passing a string
        var intent = Intent(this@SquatsActivity, Exercise2ActivityDone::class.java)
        intent.putExtra("number", squats.toString())
        intent.putExtra("duration", duration.toString())
        startActivity(intent)
        //this@PushupActivity.setResult(RESULT_OK, intent);
        this@SquatsActivity.finish()
      }
    }



    override fun onDisconnected(cameraDevice: CameraDevice) {
      cameraOpenCloseLock.release()
      cameraDevice.close()
      this@SquatsActivity.cameraDevice = null
    }

    override fun onError(cameraDevice: CameraDevice, error: Int) {
      onDisconnected(cameraDevice)
      this@SquatsActivity.finish()
    }
  }


  /**
   * A [CameraCaptureSession.CaptureCallback] that handles events related to JPEG capture.
   */
  private val captureCallback = object : CameraCaptureSession.CaptureCallback() {
    override fun onCaptureProgressed(
      session: CameraCaptureSession,
      request: CaptureRequest,
      partialResult: CaptureResult
    ) {
    }

    override fun onCaptureCompleted(
      session: CameraCaptureSession,
      request: CaptureRequest,
      result: TotalCaptureResult
    ) {
    }
  }


  override fun onResume() {
    super.onResume()
    startBackgroundThread()
    var resumetime = (System.currentTimeMillis() / 1000).toInt().toLong()
    // only add the pauseduration if pause was made
    if (pausestarttime!=0L){
      pauseduration += resumetime - pausestarttime
    }
  }

  override fun onStart() {
    super.onStart()
    openCamera()
    musicmediaPlayer?.start()
    posenet = Posenet(this@SquatsActivity)
  }

  override fun onPause() {
    pausestarttime = (System.currentTimeMillis() / 1000).toInt().toLong()
    closeCamera()
    musicmediaPlayer?.pause()
    stopBackgroundThread()
    super.onPause()
  }

  override fun onDestroy() {
    super.onDestroy()
    musicmediaPlayer?.stop()
    posenet.close()


  }

  private fun requestCameraPermission() {
    if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {
      ConfirmationDialog().show(supportFragmentManager, FRAGMENT_DIALOG)
    } else {
      requestPermissions(arrayOf(Manifest.permission.CAMERA), REQUEST_CAMERA_PERMISSION)
    }
  }

  override fun onRequestPermissionsResult(
    requestCode: Int,
    permissions: Array<String>,
    grantResults: IntArray
  ) {
    if (requestCode == REQUEST_CAMERA_PERMISSION) {
      if (allPermissionsGranted(grantResults)) {
        ErrorDialog.newInstance(getString(R.string.tfe_pn_request_permission))
          .show(supportFragmentManager, FRAGMENT_DIALOG)
      }
    } else {
      super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    }
  }

  private fun allPermissionsGranted(grantResults: IntArray) = grantResults.all {
    it == PackageManager.PERMISSION_GRANTED
  }

  /**
   * Sets up member variables related to camera.
   */
  private fun setUpCameraOutputs() {
    val activity = this@SquatsActivity
    val manager = activity.getSystemService(Context.CAMERA_SERVICE) as CameraManager
    try {
      for (cameraId in manager.cameraIdList) {
        val characteristics = manager.getCameraCharacteristics(cameraId)

        // We use a front facing camera in this sample.
        val cameraDirection = characteristics.get(CameraCharacteristics.LENS_FACING)
        if (cameraDirection != null &&
          cameraDirection == CameraCharacteristics.LENS_FACING_BACK
        ) {
          continue
        }
        this.cameraId = cameraId
      }

      if (cameraId=="" || cameraId==null){
        //use any camera now
          this.cameraId = manager.cameraIdList[0]
      }


      val characteristics = manager.getCameraCharacteristics(this.cameraId)

      previewSize = Size(PREVIEW_WIDTH, PREVIEW_HEIGHT)

        imageReader = ImageReader.newInstance(
          PREVIEW_WIDTH, PREVIEW_HEIGHT,
          ImageFormat.YUV_420_888, /*maxImages*/ 2
        )

        sensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION)!!
        sensorOrientation = 90;
        Log.d("sensorOrientationn", sensorOrientation.toString());


        previewHeight = previewSize!!.height
        previewWidth = previewSize!!.width

        // Initialize the storage bitmaps once when the resolution is known.
        rgbBytes = IntArray(previewWidth * previewHeight)

        // Check if the flash is supported.
        flashSupported =
          characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE) == true



        // We've found a viable camera and finished setting up member variables,
        // so we don't need to iterate through other available cameras.
        return



    } catch (e: CameraAccessException) {
      Log.e(TAG, e.toString())
    } catch (e: NullPointerException) {
      // Currently an NPE is thrown when the Camera2API is used but not supported on the
      // device this code runs.
      ErrorDialog.newInstance(getString(R.string.tfe_pn_camera_error))
        .show(supportFragmentManager, FRAGMENT_DIALOG)
    }
  }

  /**
   * Opens the camera specified by [SquatsActivity.cameraId].
   */
  private fun openCamera() {
    val permissionCamera = ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
    if (permissionCamera != PackageManager.PERMISSION_GRANTED) {
      requestCameraPermission()
    }
    setUpCameraOutputs()
    val manager = this@SquatsActivity.getSystemService(Context.CAMERA_SERVICE) as CameraManager
    try {
      // Wait for camera to open - 2.5 seconds is sufficient
      if (!cameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
        throw RuntimeException("Time out waiting to lock camera opening.")
      }

      manager.openCamera(cameraId!!, stateCallback, backgroundHandler)

    } catch (e: CameraAccessException) {
      Log.e(TAG, e.toString())
    } catch (e: InterruptedException) {
      throw RuntimeException("Interrupted while trying to lock camera opening.", e)
    }
  }

  /**
   * Closes the current [CameraDevice].
   */
  private fun closeCamera() {
    if (captureSession == null) {
      return
    }

    try {
      cameraOpenCloseLock.acquire()
      captureSession!!.close()
      captureSession = null
      cameraDevice!!.close()
      cameraDevice = null
      imageReader!!.close()
      imageReader = null
    } catch (e: InterruptedException) {
      throw RuntimeException("Interrupted while trying to lock camera closing.", e)
    } finally {
      cameraOpenCloseLock.release()
    }
  }

  /**
   * Starts a background thread and its [Handler].
   */
  private fun startBackgroundThread() {
    backgroundThread = HandlerThread("imageAvailableListener").also { it.start() }
    backgroundHandler = Handler(backgroundThread!!.looper)
  }

  /**
   * Stops the background thread and its [Handler].
   */
  private fun stopBackgroundThread() {
    backgroundThread?.quitSafely()
    try {
      backgroundThread?.join()
      backgroundThread = null
      backgroundHandler = null
    } catch (e: InterruptedException) {
      Log.e(TAG, e.toString())
    }
  }

  /** Fill the yuvBytes with data from image planes.   */
  private fun fillBytes(planes: Array<Image.Plane>, yuvBytes: Array<ByteArray?>) {
    // Row stride is the total number of bytes occupied in memory by a row of an image.
    // Because of the variable row stride it's not possible to know in
    // advance the actual necessary dimensions of the yuv planes.
    for (i in planes.indices) {
      val buffer = planes[i].buffer
      if (yuvBytes[i] == null) {
        yuvBytes[i] = ByteArray(buffer.capacity())
      }
      buffer.get(yuvBytes[i]!!)
    }
  }

  /** A [OnImageAvailableListener] to receive frames as they are available.  */
  private var imageAvailableListener = object : OnImageAvailableListener {
    override fun onImageAvailable(imageReader: ImageReader) {
      // We need wait until we have some size from onPreviewSizeChosen
      if (previewWidth == 0 || previewHeight == 0) {
        return
      }

      val image = imageReader.acquireLatestImage() ?: return
      fillBytes(image.planes, yuvBytes)

      ImageUtils.convertYUV420ToARGB8888(
        yuvBytes[0]!!,
        yuvBytes[1]!!,
        yuvBytes[2]!!,
        previewWidth,
        previewHeight,
        /*yRowStride=*/ image.planes[0].rowStride,
        /*uvRowStride=*/ image.planes[1].rowStride,
        /*uvPixelStride=*/ image.planes[1].pixelStride,
        rgbBytes
      )

      // Create bitmap from int array
      val imageBitmap = Bitmap.createBitmap(
        rgbBytes, previewWidth, previewHeight,
        Bitmap.Config.ARGB_8888
      )

      // Create rotated version for portrait display
      val rotateMatrix = Matrix()
      rotateMatrix.postRotate(90.0f)
      rotateMatrix.postScale(1.0F, (-1.0).toFloat(), (previewWidth/2).toFloat(), (previewHeight/2).toFloat());

      val rotatedBitmap = Bitmap.createBitmap(
        imageBitmap, 0, 0, previewWidth, previewHeight,
        rotateMatrix, true
      )
      image.close()

      processImage(rotatedBitmap)
    }
  }

  /** Crop Bitmap to maintain aspect ratio of model input.   */
  private fun cropBitmap(bitmap: Bitmap): Bitmap {
    val bitmapRatio = bitmap.height.toFloat() / bitmap.width
    val modelInputRatio = MODEL_HEIGHT.toFloat() / MODEL_WIDTH
    var croppedBitmap = bitmap

    // Acceptable difference between the modelInputRatio and bitmapRatio to skip cropping.
    val maxDifference = 1e-5

    // Checks if the bitmap has similar aspect ratio as the required model input.
    when {
      abs(modelInputRatio - bitmapRatio) < maxDifference -> return croppedBitmap
      modelInputRatio < bitmapRatio -> {
        // New image is taller so we are height constrained.
        val cropHeight = bitmap.height - (bitmap.width.toFloat() / modelInputRatio)
        croppedBitmap = Bitmap.createBitmap(
          bitmap,
          0,
          (cropHeight / 2).toInt(),
          bitmap.width,
          (bitmap.height - cropHeight).toInt()
        )
      }
      else -> {
        val cropWidth = bitmap.width - (bitmap.height.toFloat() * modelInputRatio)
        croppedBitmap = Bitmap.createBitmap(
          bitmap,
          (cropWidth / 2).toInt(),
          0,
          (bitmap.width - cropWidth).toInt(),
          bitmap.height
        )
      }
    }
    return croppedBitmap
  }

  /** Set the paint color and size.    */
  private fun setPaint() {
    paint.color = Color.RED
    paint.textSize = 80.0f
    paint.strokeWidth = 8.0f
  }

  /** Draw bitmap on Canvas.   */
  private fun draw(canvas: Canvas, person: Person, bitmap: Bitmap) {
    canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)
    // Draw `bitmap` and `person` in square canvas.
    val screenWidth: Int
    val screenHeight: Int
    val left: Int
    val right: Int
    val top: Int
    val bottom: Int
    if (canvas.height > canvas.width) {
      screenWidth = canvas.width
      screenHeight = canvas.width 
      left = 0
      top = (canvas.height - canvas.width) / 2
    } else {
      screenWidth = canvas.height
      screenHeight = canvas.height
      left = (canvas.width - canvas.height) / 2
      top = 0
    }
    right = left + screenWidth
    bottom = top + screenHeight

    setPaint()
    canvas.drawBitmap(
      bitmap,
      Rect(0, 0, bitmap.width, bitmap.height),
      Rect(left, top, right, bottom),
      paint
    )

    val widthRatio = screenWidth.toFloat() / MODEL_WIDTH
    val heightRatio = screenHeight.toFloat() / MODEL_HEIGHT

    // Draw key points over the image.
    for (keyPoint in person.keyPoints) {
      if (keyPoint.score > minConfidence) {
        val position = keyPoint.position
        val adjustedX: Float = position.x.toFloat() * widthRatio + left
        val adjustedY: Float = position.y.toFloat() * heightRatio + top
        canvas.drawCircle(adjustedX, adjustedY, circleRadius, paint)
      }
    }
    for (line in bodyJoints) {
      if (
        (person.keyPoints[line.first.ordinal].score > minConfidence) and
        (person.keyPoints[line.second.ordinal].score > minConfidence)
      ) {
        canvas.drawLine(
          person.keyPoints[line.first.ordinal].position.x.toFloat() * widthRatio + left,
          person.keyPoints[line.first.ordinal].position.y.toFloat() * heightRatio + top,
          person.keyPoints[line.second.ordinal].position.x.toFloat() * widthRatio + left,
          person.keyPoints[line.second.ordinal].position.y.toFloat() * heightRatio + top,
          paint
        )
      }
    }

    //Count squats
    if (countdown0){
      //get line between shoulders:
      //var startChestLineX = person.keyPoints[bodyJoints[2].first.ordinal].position.x.toFloat()
      var startChestLineY = person.keyPoints[bodyJoints[2].first.ordinal].position.y.toFloat()
      //var stopChestLineX = person.keyPoints[bodyJoints[2].second.ordinal].position.x.toFloat()
      var stopChestLineY = person.keyPoints[bodyJoints[2].second.ordinal].position.y.toFloat()

      var lineAverageY = (startChestLineY + stopChestLineY ).toDouble() / 2

      smoothed_yLineValues.add(smoothedZScore(lineAverageY))

      while (smoothed_yLineValues.size > 4){
        smoothed_yLineValues.removeAt(0)
      }

      if (smoothed_yLineValues.size == 4){
        if (smoothed_yLineValues == listOf(-1, -1, 1, 1)){
          squats += 1
        }
      }

      textView8.setText("Squats: " + squats.toString())
    }



    /*

    canvas.drawText(
      "Score: %.2f".format(person.score),
      (15.0f * widthRatio),
      (30.0f * heightRatio + bottom),
      paint
    )
    canvas.drawText(
      "Device: %s".format(posenet.device),
      (15.0f * widthRatio),
      (50.0f * heightRatio + bottom),
      paint
    )
    canvas.drawText(
      "Time: %.2f ms".format(posenet.lastInferenceTimeNanos * 1.0f / 1_000_000),
      (15.0f * widthRatio),
      (70.0f * heightRatio + bottom),
      paint
    )

    */


    // Draw!
    surfaceHolder!!.unlockCanvasAndPost(canvas)
  }

  /** Process image using Posenet library.   */
  private fun processImage(bitmap: Bitmap) {
    // Crop bitmap.
    val croppedBitmap = cropBitmap(bitmap)

    // Created scaled version of bitmap for model input.
    val scaledBitmap = Bitmap.createScaledBitmap(croppedBitmap, MODEL_WIDTH, MODEL_HEIGHT, true)

    // Perform inference.
    val person = posenet.estimateSinglePose(scaledBitmap)
    val canvas: Canvas = surfaceHolder!!.lockCanvas()
    draw(canvas, person, scaledBitmap)
  }

  /**
   * Creates a new [CameraCaptureSession] for camera preview.
   */
  private fun createCameraPreviewSession() {
    try {
      // We capture images from preview in YUV format.
      imageReader = ImageReader.newInstance(
        previewSize!!.width, previewSize!!.height, ImageFormat.YUV_420_888, 2
      )
      imageReader!!.setOnImageAvailableListener(imageAvailableListener, backgroundHandler)

      // This is the surface we need to record images for processing.
      val recordingSurface = imageReader!!.surface

      // We set up a CaptureRequest.Builder with the output Surface.
      previewRequestBuilder = cameraDevice!!.createCaptureRequest(
        CameraDevice.TEMPLATE_PREVIEW
      )
      previewRequestBuilder!!.addTarget(recordingSurface)

      // Here, we create a CameraCaptureSession for camera preview.
      cameraDevice!!.createCaptureSession(
        listOf(recordingSurface),
        object : CameraCaptureSession.StateCallback() {
          override fun onConfigured(cameraCaptureSession: CameraCaptureSession) {
            // The camera is already closed
            if (cameraDevice == null) return

            // When the session is ready, we start displaying the preview.
            captureSession = cameraCaptureSession
            try {
              // Auto focus should be continuous for camera preview.
              previewRequestBuilder!!.set(
                CaptureRequest.CONTROL_AF_MODE,
                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
              )
              // Flash is automatically enabled when necessary.
              setAutoFlash(previewRequestBuilder!!)

              // Finally, we start displaying the camera preview.
              previewRequest = previewRequestBuilder!!.build()
              captureSession!!.setRepeatingRequest(
                previewRequest!!,
                captureCallback, backgroundHandler
              )
            } catch (e: CameraAccessException) {
              Log.e(TAG, e.toString())
            }
          }

          override fun onConfigureFailed(cameraCaptureSession: CameraCaptureSession) {
            //showToast("Failed")
          }

        },
        null
      )
    } catch (e: CameraAccessException) {
      Log.e(TAG, e.toString())
    }
  }


  /**
   * Smoothed zero-score alogrithm shamelessly copied from https://stackoverflow.com/a/22640362/6029703
   * Uses a rolling mean and a rolling deviation (separate) to identify peaks in a vector
   *
   * @param y - The input vector to analyze
   * @param lag - The lag of the moving window (i.e. how big the window is)
   * @param threshold - The z-score at which the algorithm signals (i.e. how many standard deviations away from the moving mean a peak (or signal) is)
   * @param influence - The influence (between 0 and 1) of new signals on the mean and standard deviation (how much a peak (or signal) should affect other values near it)
   * @return - The calculated averages (avgFilter) and deviations (stdFilter), and the signals (signals)
   */
  private fun smoothedZScore(lineAverageY: Double): Int{ //Triple<List<Int>, List<Double>, List<Double>> {
    // *-1 to correct screen coordinates
    yLineValues.add(lineAverageY.toDouble() * -1)

    //loop input starting at end of rolling window
    //(lag..y.size - 1).forEach { i ->
    //if the distance between the current value and average is enough standard deviations (threshold) away
    var i = yLineValues.size - 1
    if (i < this.lag){
      return 0
    }
    else if (i == this.lag){
      // the results (peaks, 1 or -1) of our algorithm
      signals = MutableList<Int>(yLineValues.size, { 0 })
      // filter out the signals (peaks) from our original list (using influence arg)
      filteredY = ArrayList<Double>(yLineValues)
      // the current average of the rolling window
      avgFilter = MutableList<Double>(yLineValues.size, { 0.0 })
      // the current standard deviation of the rolling window
      stdFilter = MutableList<Double>(yLineValues.size, { 0.0 })


      yLineValues.take(10).forEach { s -> stats.addValue(s) }
      avgFilter[this.lag - 1] = stats.mean
      stdFilter[this.lag - 1] = Math.sqrt(stats.populationVariance) // getStandardDeviation() uses sample variance (not what we want)
      stats.clear()
      return 0
    }

    signals.add(0)
    filteredY.add(0.0)
    avgFilter.add(0.0)
    stdFilter.add(0.0)




    if (Math.abs(yLineValues[i] - avgFilter[i - 1]) > threshold * stdFilter[i - 1]) {
      //this is a signal (i.e. peak), determine if it is a positive or negative signal
      signals[i] = if (yLineValues[i] > avgFilter[i - 1]) 1 else -1
      //filter this signal out using influence
      filteredY[i] = (influence * yLineValues[i]) + ((1 - influence) * filteredY[i - 1])

    } else {
      //ensure this signal remains a zero
      signals[i] = 0
      //ensure this value is not filtered
      filteredY[i] = yLineValues[i]
    }
    //update rolling average and deviation
    (i - lag..i /*-1*/).forEach { stats.addValue(filteredY[it]) }
    avgFilter[i] = stats.getMean()
    stdFilter[i] = Math.sqrt(stats.getPopulationVariance()) //getStandardDeviation() uses sample variance (not what we want)
    stats.clear()

    return signals[i] //Triple(signals, avgFilter, stdFilter)
  }
  private fun setAutoFlash(requestBuilder: CaptureRequest.Builder) {
    if (flashSupported) {
      requestBuilder.set(
        CaptureRequest.CONTROL_AE_MODE,
        CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH
      )
    }
  }

  /**
   * Shows an error message dialog.
   */
  class ErrorDialog : DialogFragment() {

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog =
      AlertDialog.Builder(activity)
        .setMessage(requireArguments().getString(ARG_MESSAGE))
        .setPositiveButton(android.R.string.ok) { _, _ -> requireActivity().finish() }
        .create()

    companion object {

      @JvmStatic
      private val ARG_MESSAGE = "message"

      @JvmStatic
      fun newInstance(message: String): ErrorDialog = ErrorDialog().apply {
        arguments = Bundle().apply { putString(ARG_MESSAGE, message) }
      }
    }
  }

  companion object {
    /**
     * Conversion from screen rotation to JPEG orientation.
     */
    private val ORIENTATIONS = SparseIntArray()
    private val FRAGMENT_DIALOG = "dialog"

    init {
      ORIENTATIONS.append(Surface.ROTATION_0, 90)
      ORIENTATIONS.append(Surface.ROTATION_90, 0)
      ORIENTATIONS.append(Surface.ROTATION_180, 270)
      ORIENTATIONS.append(Surface.ROTATION_270, 180)
    }

    /**
     * Tag for the [Log].
     */
    private const val TAG = "SquatsActivity"
  }
}
